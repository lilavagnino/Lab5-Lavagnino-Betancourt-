#include <Arduino.h>
#include "config.h"

#define e1 35
#define e2 34


// Declaración de variables y feeds de Adafruit IO
int pot1 = 0;
int pot2 = 0;

int val1 = 0;
int val2 = 0;
int mult = 0;

const int pindisplay1[7] = { 33, 12, 14, 15, 13, 26, 27 };
const int pindisplay2[7] = {22, 23, 5, 4, 2, 21, 19 };

const byte display[16] = 
{
    0b0111111, // 0
    0b0000110, // 1
    0b1011011, // 2
    0b1001111, // 3
    0b1100110, // 4
    0b1101101, // 5
    0b1111101, // 6
    0b0000111, // 7
    0b1111111, // 8
    0b1101111, // 9
    0b1110111, // A
    0b1111100, // B
    0b0111001, // C
    0b1011110, // D
    0b1111001, // E
    0b1110001  // F
};

AdafruitIO_Feed *dash1 = io.feed("Pot_1");
AdafruitIO_Feed *dash2 = io.feed("Pot_2");
AdafruitIO_Feed *dash3 = io.feed("Pot_1_2");

void showdisplay1(int number) {

  byte numberBit = display[number];
  for (int i = 0; i < 7; i++) {
  int bit = bitRead(numberBit, i);
  digitalWrite(pindisplay1[i], bit);
}
}

void showdisplay2(int number2) {

  byte numberBit2 = display[number2];
  for (int i = 0; i < 7; i++) {
  int bit = bitRead(numberBit2, i);
  digitalWrite(pindisplay2[i], bit);
}
}

void setupAnalog(void);

//Para que el botón envíe los datos al datafruit
struct Boton1{ 
  const uint8_t boton_Reset;
  bool pressed;
  bool lastState;
};
Boton1 reset = {32, false, false};

//variables de handle interrupcion
void IRAM_ATTR handle_reset(){
  portENTER_CRITICAL_ISR(&mux);
  reset.pressed = true;
  portEXIT_CRITICAL_ISR(&mux);
}

void setup() {
  // Inicia la conexión serial
  Serial.begin(115200);

  pot1=analogRead(e1);
  pot2=analogRead(e2);

  for(int i = 0; i < 7; i++) {
    
    pinMode(pindisplay1[i], OUTPUT);
    
    }
  
  for(int i = 0; i < 7; i++) {
    
    pinMode(pindisplay2[i], OUTPUT);
    
    }

  // Espera a que el monitor serial se abra
  while (!Serial);

  Serial.print("Connecting to Adafruit IO");

  // Conectar a Adafruit IO
  io.connect();

  // Esperar a que la conexión se complete
  while (io.status() < AIO_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
 
}

void loop() {
  // Mantener la conexión activa con el servidor de Adafruit IO
  io.run();


  val1=map(pot1,0,4025,0,15);
  val2=map(pot2,0,4025,0,15);
  mult=val1*val2;

  showdisplay1(val1);
  showdisplay2(val2);


  // Enviar la temperatura al feed "Lab5"
  Serial.print("sending -> ");
  Serial.println(val1);
  Serial.println(val2);
  Serial.println(mult);


  dash1->save(val1);
  dash2->save(val2);
  dash3->save(mult);

  // Añadir un retraso de 3 segundos para cumplir con las limitaciones de Adafruit IO
  delay(3000);
}


